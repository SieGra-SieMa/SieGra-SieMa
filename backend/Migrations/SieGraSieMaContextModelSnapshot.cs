// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SieGraSieMa.Models;

namespace SieGraSieMa.Migrations
{
    [DbContext(typeof(SieGraSieMaContext))]
    partial class SieGraSieMaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("SieGraSieMa.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CreateDate")
                        .HasColumnType("int")
                        .HasColumnName("create_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int")
                        .HasColumnName("tournament_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TournamentId" }, "album_tournament");

                    b.ToTable("album");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Contest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int")
                        .HasColumnName("tournament_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TournamentId" }, "contest_tournament");

                    b.ToTable("contest");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Contestant", b =>
                {
                    b.Property<int>("ContestId")
                        .HasColumnType("int")
                        .HasColumnName("contest_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.HasKey("ContestId", "UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "contestants_user");

                    b.ToTable("contestants");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("Ladder")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ladder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .HasColumnName("name")
                        .IsFixedLength(true);

                    b.Property<int>("TournamentId")
                        .HasColumnType("int")
                        .HasColumnName("tournament_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TournamentId" }, "group_tournament");

                    b.HasIndex(new[] { "Name", "TournamentId" }, "name_in_tournament")
                        .IsUnique();

                    b.ToTable("group");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("action");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime")
                        .HasColumnName("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "logs_user");

                    b.ToTable("logs");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<string>("Referee")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("referee");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<int>("TeamAwayId")
                        .HasColumnType("int")
                        .HasColumnName("team_away_id");

                    b.Property<int>("TeamAwayScore")
                        .HasColumnType("int")
                        .HasColumnName("team_away_score");

                    b.Property<int>("TeamHomeId")
                        .HasColumnType("int")
                        .HasColumnName("team_home_id");

                    b.Property<int>("TeamHomeScore")
                        .HasColumnType("int")
                        .HasColumnName("team_home_score");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TeamAwayId" }, "match_away");

                    b.HasIndex(new[] { "TeamHomeId", "TeamAwayId" }, "meet")
                        .IsUnique();

                    b.ToTable("match");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Medium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int")
                        .HasColumnName("album_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AlbumId" }, "media_album");

                    b.ToTable("media");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Newsletter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "Table_28_user");

                    b.ToTable("newsletter");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Player", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("TeamId", "UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "player_user");

                    b.ToTable("player");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CaptainId")
                        .HasColumnType("int")
                        .HasColumnName("captain_id")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)")
                        .HasColumnName("code")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CaptainId" }, "captain");

                    b.HasIndex(new[] { "Code" }, "code")
                        .IsUnique();

                    b.ToTable("team");
                });

            modelBuilder.Entity("SieGraSieMa.Models.TeamInGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TeamId" }, "Table_25_team");

                    b.HasIndex(new[] { "GroupId" }, "team_group");

                    b.ToTable("team_in_group");
                });

            modelBuilder.Entity("SieGraSieMa.Models.TeamInTournament", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int")
                        .HasColumnName("tournament_id");

                    b.Property<bool>("Paid")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("paid");

                    b.HasKey("TeamId", "TournamentId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TournamentId" }, "Table_27_tournament");

                    b.ToTable("team_in_tournament");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("address");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.ToTable("tournament");
                });

            modelBuilder.Entity("SieGraSieMa.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("salt");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("SieGraSieMa.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "Table_26_role");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Album", b =>
                {
                    b.HasOne("SieGraSieMa.Models.Tournament", "Tournament")
                        .WithMany("Albums")
                        .HasForeignKey("TournamentId")
                        .HasConstraintName("album_tournament");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Contest", b =>
                {
                    b.HasOne("SieGraSieMa.Models.Tournament", "Tournament")
                        .WithMany("Contests")
                        .HasForeignKey("TournamentId")
                        .HasConstraintName("contest_tournament")
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Contestant", b =>
                {
                    b.HasOne("SieGraSieMa.Models.Contest", "Contest")
                        .WithMany("Contestants")
                        .HasForeignKey("ContestId")
                        .HasConstraintName("contestants_contest")
                        .IsRequired();

                    b.HasOne("SieGraSieMa.Models.User", "User")
                        .WithMany("Contestants")
                        .HasForeignKey("UserId")
                        .HasConstraintName("contestants_user")
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Group", b =>
                {
                    b.HasOne("SieGraSieMa.Models.Tournament", "Tournament")
                        .WithMany("Groups")
                        .HasForeignKey("TournamentId")
                        .HasConstraintName("group_tournament")
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Log", b =>
                {
                    b.HasOne("SieGraSieMa.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("logs_user")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Match", b =>
                {
                    b.HasOne("SieGraSieMa.Models.TeamInGroup", "TeamAway")
                        .WithMany("MatchTeamAways")
                        .HasForeignKey("TeamAwayId")
                        .HasConstraintName("match_away")
                        .IsRequired();

                    b.HasOne("SieGraSieMa.Models.TeamInGroup", "TeamHome")
                        .WithMany("MatchTeamHomes")
                        .HasForeignKey("TeamHomeId")
                        .HasConstraintName("match_home")
                        .IsRequired();

                    b.Navigation("TeamAway");

                    b.Navigation("TeamHome");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Medium", b =>
                {
                    b.HasOne("SieGraSieMa.Models.Album", "Album")
                        .WithMany("Media")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("media_album")
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Newsletter", b =>
                {
                    b.HasOne("SieGraSieMa.Models.User", "User")
                        .WithMany("Newsletters")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Table_28_user")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Player", b =>
                {
                    b.HasOne("SieGraSieMa.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("player_team")
                        .IsRequired();

                    b.HasOne("SieGraSieMa.Models.User", "User")
                        .WithMany("Players")
                        .HasForeignKey("UserId")
                        .HasConstraintName("player_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Team", b =>
                {
                    b.HasOne("SieGraSieMa.Models.User", "Captain")
                        .WithMany("Teams")
                        .HasForeignKey("CaptainId")
                        .HasConstraintName("captain")
                        .IsRequired();

                    b.Navigation("Captain");
                });

            modelBuilder.Entity("SieGraSieMa.Models.TeamInGroup", b =>
                {
                    b.HasOne("SieGraSieMa.Models.Group", "Group")
                        .WithMany("TeamInGroups")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("team_group")
                        .IsRequired();

                    b.HasOne("SieGraSieMa.Models.Team", "Team")
                        .WithMany("TeamInGroups")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("Table_25_team")
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SieGraSieMa.Models.TeamInTournament", b =>
                {
                    b.HasOne("SieGraSieMa.Models.Team", "Team")
                        .WithMany("TeamInTournaments")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("Table_27_team")
                        .IsRequired();

                    b.HasOne("SieGraSieMa.Models.Tournament", "Tournament")
                        .WithMany("TeamInTournaments")
                        .HasForeignKey("TournamentId")
                        .HasConstraintName("Table_27_tournament")
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("SieGraSieMa.Models.UserRole", b =>
                {
                    b.HasOne("SieGraSieMa.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("Table_26_role")
                        .IsRequired();

                    b.HasOne("SieGraSieMa.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Table_26_user")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Album", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Contest", b =>
                {
                    b.Navigation("Contestants");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Group", b =>
                {
                    b.Navigation("TeamInGroups");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Team", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("TeamInGroups");

                    b.Navigation("TeamInTournaments");
                });

            modelBuilder.Entity("SieGraSieMa.Models.TeamInGroup", b =>
                {
                    b.Navigation("MatchTeamAways");

                    b.Navigation("MatchTeamHomes");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Tournament", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Contests");

                    b.Navigation("Groups");

                    b.Navigation("TeamInTournaments");
                });

            modelBuilder.Entity("SieGraSieMa.Models.User", b =>
                {
                    b.Navigation("Contestants");

                    b.Navigation("Logs");

                    b.Navigation("Newsletters");

                    b.Navigation("Players");

                    b.Navigation("Teams");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
