// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SieGraSieMa.Models;

namespace SieGraSieMa.Migrations
{
    [DbContext(typeof(SieGraSieMaContext))]
    [Migration("20220109210738_mergeFix")]
    partial class mergeFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85)
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "f8b48b49-2bff-435e-b60b-e618cef935e4",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "53947a80-840e-4da1-9375-85c12e18e318",
                            Name = "Emp",
                            NormalizedName = "Emp"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "614dcd0a-affd-4fd4-af13-1341245ff6d8",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85)
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85)
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("Name")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CreateDate")
                        .HasColumnType("int")
                        .HasColumnName("create_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int")
                        .HasColumnName("tournament_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TournamentId" }, "album_tournament");

                    b.ToTable("album");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Contest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int")
                        .HasColumnName("tournament_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TournamentId" }, "contest_tournament");

                    b.ToTable("contest");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Contestant", b =>
                {
                    b.Property<int>("ContestId")
                        .HasColumnType("int")
                        .HasColumnName("contest_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.HasKey("ContestId", "UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "contestants_user");

                    b.ToTable("contestants");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("Ladder")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ladder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("name");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int")
                        .HasColumnName("tournament_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TournamentId" }, "group_tournament");

                    b.HasIndex(new[] { "Name", "TournamentId" }, "name_in_tournament")
                        .IsUnique();

                    b.ToTable("group");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("action");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime")
                        .HasColumnName("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "logs_user");

                    b.ToTable("logs");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("TeamAwayId")
                        .HasColumnType("int")
                        .HasColumnName("team_away_id");

                    b.Property<int>("TeamAwayScore")
                        .HasColumnType("int")
                        .HasColumnName("team_away_score");

                    b.Property<int>("TeamHomeId")
                        .HasColumnType("int")
                        .HasColumnName("team_home_id");

                    b.Property<int>("TeamHomeScore")
                        .HasColumnType("int")
                        .HasColumnName("team_home_score");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TeamAwayId" }, "match_away");

                    b.HasIndex(new[] { "TeamHomeId", "TeamAwayId" }, "meet")
                        .IsUnique();

                    b.ToTable("match");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Medium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int")
                        .HasColumnName("album_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AlbumId" }, "media_album");

                    b.ToTable("media");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Newsletter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "Table_28_user");

                    b.ToTable("newsletter");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("SieGraSieMa.Models.Player", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("TeamId", "UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "player_user");

                    b.ToTable("player");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            UserId = 3
                        },
                        new
                        {
                            TeamId = 1,
                            UserId = 4
                        },
                        new
                        {
                            TeamId = 2,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("SieGraSieMa.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("createdByIp");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime")
                        .HasColumnName("expires");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text")
                        .HasColumnName("replacedByToken");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime")
                        .HasColumnName("revoked");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("revokedByIp");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Id" }, "Id")
                        .IsUnique();

                    b.ToTable("refresh_token");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CaptainId")
                        .HasColumnType("int")
                        .HasColumnName("captain_id")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)")
                        .HasColumnName("code")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CaptainId" }, "captain");

                    b.HasIndex(new[] { "Code" }, "code")
                        .IsUnique();

                    b.ToTable("team");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CaptainId = 3,
                            Code = "ABCDE",
                            Name = "Bogowie"
                        },
                        new
                        {
                            Id = 2,
                            CaptainId = 3,
                            Code = "EDCBA",
                            Name = "Demony"
                        });
                });

            modelBuilder.Entity("SieGraSieMa.Models.TeamInGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TeamId" }, "Table_25_team");

                    b.HasIndex(new[] { "GroupId" }, "team_group");

                    b.ToTable("team_in_group");
                });

            modelBuilder.Entity("SieGraSieMa.Models.TeamInTournament", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int")
                        .HasColumnName("tournament_id");

                    b.Property<bool>("Paid")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("paid");

                    b.HasKey("TeamId", "TournamentId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TournamentId" }, "Table_27_tournament");

                    b.ToTable("team_in_tournament");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("address");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.ToTable("tournament");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Zbożowa -1",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Turniej testowy numer 1",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SieGraSieMa.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85)
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("surname");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "259617d9-f8b8-492e-bcdb-cc55db1e2030",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Adm",
                            NormalizedEmail = "admin@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEKttNKQYq3OOBpUI8lALtKk9tQJWrkf5GGlPT3jUN4Oy2ugHKF70WBQ3MQjR2oRvAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "457cd223-68a5-4dab-b5eb-1f39b8bfd827",
                            Surname = "In",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c869d21-c3fe-49df-a462-f2ad9f588ae0",
                            Email = "pracownik@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Prac",
                            NormalizedEmail = "pracownik@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEMc7lB1A5ox0fCoK1xsi9sgqaFIWZKsmTIbxSaRX5ccdqs+0dVD50EyDm1lMLzvxbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea33d2c1-4430-490b-b63e-9c788b45cd67",
                            Surname = "Ownik",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fbb815f2-0418-44fe-bfbb-3f8d55c04f23",
                            Email = "kapitan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Kap",
                            NormalizedEmail = "kapitan@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEPKR6UfcGmNmFQ43NAO9jYhITe/VIGTX9MjffQbzvJz3xFMFMT2N3HPTqaHWVEgrFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "527ce89a-2c6b-469c-a353-0285af097c23",
                            Surname = "Itan",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2338a37d-c06b-4ec0-9717-c0a678d11e4f",
                            Email = "gracz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Gr",
                            NormalizedEmail = "gracz@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEH8gvG7cHtb6iAXuut5ihFG1tx9PLNdalH4FnUgwNwe3lkUqqM7rxwtc1DSpkm4JoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4d81bb5-05f4-409b-aa0f-686387cc861e",
                            Surname = "acz",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SieGraSieMa.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SieGraSieMa.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SieGraSieMa.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SieGraSieMa.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SieGraSieMa.Models.Album", b =>
                {
                    b.HasOne("SieGraSieMa.Models.Tournament", "Tournament")
                        .WithMany("Albums")
                        .HasForeignKey("TournamentId")
                        .HasConstraintName("album_tournament");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Contest", b =>
                {
                    b.HasOne("SieGraSieMa.Models.Tournament", "Tournament")
                        .WithMany("Contests")
                        .HasForeignKey("TournamentId")
                        .HasConstraintName("contest_tournament")
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Contestant", b =>
                {
                    b.HasOne("SieGraSieMa.Models.Contest", "Contest")
                        .WithMany("Contestants")
                        .HasForeignKey("ContestId")
                        .HasConstraintName("contestants_contest")
                        .IsRequired();

                    b.HasOne("SieGraSieMa.Models.User", "User")
                        .WithMany("Contestants")
                        .HasForeignKey("UserId")
                        .HasConstraintName("contestants_user")
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Group", b =>
                {
                    b.HasOne("SieGraSieMa.Models.Tournament", "Tournament")
                        .WithMany("Groups")
                        .HasForeignKey("TournamentId")
                        .HasConstraintName("group_tournament")
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Log", b =>
                {
                    b.HasOne("SieGraSieMa.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("logs_user")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Match", b =>
                {
                    b.HasOne("SieGraSieMa.Models.TeamInGroup", "TeamAway")
                        .WithMany("MatchTeamAways")
                        .HasForeignKey("TeamAwayId")
                        .HasConstraintName("match_away")
                        .IsRequired();

                    b.HasOne("SieGraSieMa.Models.TeamInGroup", "TeamHome")
                        .WithMany("MatchTeamHomes")
                        .HasForeignKey("TeamHomeId")
                        .HasConstraintName("match_home")
                        .IsRequired();

                    b.Navigation("TeamAway");

                    b.Navigation("TeamHome");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Medium", b =>
                {
                    b.HasOne("SieGraSieMa.Models.Album", "Album")
                        .WithMany("Media")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("media_album")
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Newsletter", b =>
                {
                    b.HasOne("SieGraSieMa.Models.User", "User")
                        .WithMany("Newsletters")
                        .HasForeignKey("UserId")
                        .HasConstraintName("newsletter_user")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Player", b =>
                {
                    b.HasOne("SieGraSieMa.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("player_team")
                        .IsRequired();

                    b.HasOne("SieGraSieMa.Models.User", "User")
                        .WithMany("Players")
                        .HasForeignKey("UserId")
                        .HasConstraintName("player_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SieGraSieMa.Models.RefreshToken", b =>
                {
                    b.HasOne("SieGraSieMa.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("refresh_token_user")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Team", b =>
                {
                    b.HasOne("SieGraSieMa.Models.User", "Captain")
                        .WithMany("Teams")
                        .HasForeignKey("CaptainId")
                        .HasConstraintName("captain")
                        .IsRequired();

                    b.Navigation("Captain");
                });

            modelBuilder.Entity("SieGraSieMa.Models.TeamInGroup", b =>
                {
                    b.HasOne("SieGraSieMa.Models.Group", "Group")
                        .WithMany("TeamInGroups")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("team_in_group_group")
                        .IsRequired();

                    b.HasOne("SieGraSieMa.Models.Team", "Team")
                        .WithMany("TeamInGroups")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("team_in_group_team")
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SieGraSieMa.Models.TeamInTournament", b =>
                {
                    b.HasOne("SieGraSieMa.Models.Team", "Team")
                        .WithMany("TeamInTournaments")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("team_in_tournament_team")
                        .IsRequired();

                    b.HasOne("SieGraSieMa.Models.Tournament", "Tournament")
                        .WithMany("TeamInTournaments")
                        .HasForeignKey("TournamentId")
                        .HasConstraintName("team_in_tournament_tournament")
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Album", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Contest", b =>
                {
                    b.Navigation("Contestants");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Group", b =>
                {
                    b.Navigation("TeamInGroups");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Team", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("TeamInGroups");

                    b.Navigation("TeamInTournaments");
                });

            modelBuilder.Entity("SieGraSieMa.Models.TeamInGroup", b =>
                {
                    b.Navigation("MatchTeamAways");

                    b.Navigation("MatchTeamHomes");
                });

            modelBuilder.Entity("SieGraSieMa.Models.Tournament", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Contests");

                    b.Navigation("Groups");

                    b.Navigation("TeamInTournaments");
                });

            modelBuilder.Entity("SieGraSieMa.Models.User", b =>
                {
                    b.Navigation("Contestants");

                    b.Navigation("Logs");

                    b.Navigation("Newsletters");

                    b.Navigation("Players");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
